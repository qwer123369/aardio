namespace std;
import util.metaProperty

meta = function(t, add = true){
    if( type(t)=="table" ) { 
        t@ = add ? {
            _get = ..table.map(..table, function(v){
                return lambda(...) v(owner,...)
            });
            _float = true;
        } : null
    }
    return t; 
}

curry = lambda(f) λ(x) λ(y) f(x,y)
unless = function(p,f) if(!p) f()
times = function(n, f) for(i=1;n) f(i)
forEach = function(t,f) for(k,v in t) f(v,k)

tap = function(v){
    return lambda(f) unless ( 
        !(type(f)==="function")
        ,λ()..console.dumpJson(
            ["参数值"] = v,
            ["返回值"] = f(v) || "No return values!"
    ))
}

identity = function(it){
    ..console.varDump( it );
    return it; 
}

compose = function(...){
    var fs = {...}; 
    ..table.reverse( fs )
    return lambda(v) reduce(fs, λ(p,f) f(p), v)
}

pipe = function(...){
    var fs = {...}; 
    return lambda(v) reduce(fs, λ(p,f) f(p), v); 
}

memoized = function(f){
    var r = {};
    return function(n) {
        if(!r[n]) r[n]= f(n);
        return r[n]; 
    }
}

//--------------------------
..tap = tap;
..meta = meta;
..pipe = pipe;
..times = times;
..curry = curry;
..unless = unless;
..forEach = forEach;
..compose = compose;
..identity = identity;
..memoized = memoized;

//--------------------------
..table.of = lambda(...){...};
..table.reduce = = function(t, f,...){
    if( type(f) !="table" ) f = {f,...};
    return reduce(f, lambda(t, f) meta(f(t)), t);
};

//--------------------------
class Maybe{
    ctor(val){
        this.value = val;
    };
    @_meta
}
Maybe._meta = {
    _get = {
        isNothing = function(){
            return owner.value === null; 
        }
        map = function(f){
            meta(owner.value) 
            if(!owner.isNothing()) owner.value = f(owner.value)
            return owner; 
        }
        join = function(){
            return owner.isNothing() ? owner : owner.value; 
        }
        chain = function(f){
            return owner.map(f).join();
        }
        log = function(){
            if(owner.isNothing()) owner.value = "null"
            ..console.dumpJson(["Maybe"] = {value = owner.value })
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Maybe";
}
..Maybe = Maybe;

class Nothing{
    ctor(val){
        this.value = val;
    };
    @_meta
}
Nothing._meta = {
    _get = {
        map = function(f){
            return owner; 
        }
        log = function(){
            ..console.dumpJson(["Nothing"] = {value = owner.value})
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Nothing";
}

class Some{
    ctor(val){
        this.value = val;
    };
    @_meta;
}
Some._meta = {
    _get = {
        map = function(fn){
            meta(owner.value)
            owner.value = fn(owner.value);
            return owner; 
        }
        log = function(){
            ..console.dumpJson(["Some"] = {value = owner.value})
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Some";
}
..Some = Some;
..Nothing = Nothing;
..Either = { Some = Some, Nothing = Nothing}

class Set{
    ctor(t,...){
        if(type(t)!="table") t = {t,...}
        this = reduce(t,function(p,n){
            if(!..table.find(p,n) ) ..table.push(p,n)
            return p
        },{})	
    };
    @_metaProperty;
}
namespace Set{
    var pop = ..table.pop;
    var find = ..table.find;
    var push = ..table.push;
    var remove = ..table.remove;
    _metaProperty = ..util.metaProperty(
        add = function(v,...){
            if(type(v)!="table") v = {v,...}
            owner = reduce(v,function(p,n){
                if( !find(p,n) ) push(p,n)
                return p
            },owner)
            return owner; 
        }
        delete = function(v){
            return !!remove(owner, find(owner,v)||0)  
        }
        has = function(v){
            return !!find(owner, v); 
        }
        clear = function(){
            pop(owner,#owner)
        }
        size = { _get = lambda() #owner };
    )	
}
..Set = Set;
