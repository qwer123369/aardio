import util;
import util.metaProperty;

namespace std;

/* Functional Programming library for AArdio by suiang */

isCallable = ..util.isCallable;
isTable = lambda(t) type(t)==type.table;

meta = function(t, add = true){
    if( isTable(t) ) { 
        t@ = add ? {
            _get = ..table.map(..table, function(v){
                return lambda(...) v(owner,...)
            });
            _float = true;
        } : null
    }
    return t; 
}

partial = ..util.bind;
curry = lambda(f) λ(x) λ(y) f(x,y)
unless = function(p,f) if(!p) return f()
times = function(n, f) for(i=1;n) f(i)
forEach = function(t,f) for(k,v in t) f(v,k)

tap = function(v){
    return lambda(f) unless ( 
        !( isCallable(f) )
        ,λ()..console.dumpJson(
            ["参数值"] = v,
            ["返回值"] = f(v)
            || "No return values!";
    ))
}

identity = function(it){
    ..console.varDump( it );
    return it; 
}

compose = function(...){
    var fs = {...}; 
    ..table.reverse( fs )
    return lambda(v) reduce(fs, λ(p,f) meta(f(p)), meta(v))
}

pipe = function(...){
    var fs = {...}; 
    return lambda(v) reduce(fs, λ(p,f) meta(f(p)), meta(v)); 
}

memoized = function(f){
    var r = {};
    return function(n) {
        if(!r[n]) r[n]= f(n);
        return r[n]; 
    }
}

..table.of = lambda(...){...};
..table.reduce = function(t, f,...){
    if( !isTable(f) ) f = {f,...};
    return reduce(f, lambda(t, f) meta(f(t)), meta(t));
};

class Maybe{
    ctor(val){
        this.value = val;
    };
    @_meta
}
Maybe._meta = {
    _get = {
        isNothing = function(){
            return owner.value === null; 
        }
        map = function(f){
            meta(owner.value) 
            if(!owner.isNothing()) owner.value = f(owner.value)
            return owner; 
        }
        join = function(){
            return owner.isNothing() ? owner : owner.value; 
        }
        chain = function(f){
            return owner.map(f).join();
        }
        log = function(){
            if(owner.isNothing()) owner.value = "null"
            ..console.dumpJson(["Maybe"] = {value = owner.value })
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Maybe";
}

class Nothing{
    ctor(val){
        this.value = val;
    };
    @_meta
}
Nothing._meta = {
    _get = {
        map = function(f){
            return owner; 
        }
        log = function(){
            ..console.dumpJson(["Nothing"] = {value = owner.value})
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Nothing";
}

class Some{
    ctor(val){
        this.value = val;
    };
    @_meta;
}
Some._meta = {
    _get = {
        map = function(fn){
            meta(owner.value)
            owner.value = fn(owner.value);
            return owner; 
        }
        log = function(){
            ..console.dumpJson(["Some"] = {value = owner.value})
            return owner; 
        }
    }
    _call = lambda() owner.value;
    _type = "Some";
}

Either = {
    Some = Some,
    Nothing = Nothing
};

class Set{
    ctor(t,...){
        if( !isTable(t) ) t = {t,...}
        this = ..table.unique(t)	
    };
    @_metaProperty;
}
Set._metaProperty = ..util.metaProperty(
    add = function(v,...){
        if( !isTable(v) ) v = {v,...}
        owner = reduce(v,function(p,n){
            if( !..table.find(p,n) ) ..table.push(p,n)
            return p
        },owner)
        return owner; 
    }
    delete = function(v){
        return !!..table.remove(owner, ..table.find(owner,v)||0)
    }
    has = function(v){
        return !!..table.find(owner, v); 
    }
    clear = function(){
        ..table.pop(owner,#owner)
    }
    size = { _get = lambda() #owner };
)

createWin = function(params){
    import win.ui;
    if(type.isString(params)){
        import web.json
        params = web.json.tryParse(params)
        var ctrl = params[["ctrl"]]; 
        if(isTable(ctrl)){
            forEach(ctrl, lambda(v) unless(
                !v[["oncommand"]], function(){
                    v.oncommand = eval(v.oncommand)
            }))
        }
    }
    var form = win.form(params.form);
    form.add( params.ctrl )
    return form; 
}

forEach(self, function(v,k) global[k] = v)

/*
import inet.http;
inet.http.import("https://suiang.cn/aardio/inetlib/std.aardio")
*/
