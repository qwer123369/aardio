import console;

namespace table;

class event {
    ctor(o) {
        var o = o or {};
        this, members[o] = o, o;

        this.events = {};
        this.muted = false;
        this.isOnce = false;
    };
    @_meta;
}

namespace event {
    
    _meta = {
        _get = {
            on = function(name, callback) {
                owner.events[name] = callback
            };
            once = function(name, callback) {
                owner.isOnce = true;
                owner.events[name] = callback
            };
            off = function(name) {
                if (owner.events[name])
                    owner.events[name] = null
            };
            allOff = function() {
                owner.events = {};
                owner.muted = false
            };
            mute = function(state) {
                owner.muted = state
            };
            isMuted = function() {
                return owner.muted;
            };
            emit = function(name, ...) {
                var evt = {
                    name = name;
                    isOnce = owner.isOnce;
                    @_meta;
                }
                _broadcast(evt, ...)
                owner.isOnce = false
            };
            _onEvent = function(evt, ...) {
                if (owner.events[evt.name]) {
                    owner.events[evt.name](evt, ...)
                    if (owner.isOnce) owner.off(evt.name)
                }
            };
        }
    }
    
    var log = ..console.log;
    var push = ..table.push;
    var sort = ..table.sort;
    
    members = {};
    _broadcast = function(evt, ...) {
        for (_, mbr in members) {
            if (mbr and not mbr.muted) {
                mbr._onEvent(evt, ...)
            }
        }
    };
    count = function() {
        var n = 0
        for (_, mbr in members) {
            if (mbr) n = n + 1
        }
        return n;
    };
    list = function() {
        for (_, mbr in members) {
            print(mbr.events)
        }
    };
    release = function(mbr) {
        if (members[mbr]) {
            members[mbr] = null
        }
    };

    var _toString = function(t, indent) {
        var names = {}
        if (not indent) indent = ""
        for (n in t) push(names, n)
        sort(names);
        for (_, n in names) {
            var v = t[n]
            if (type(v) == "table") {
                log(indent + tostring(n) + ":")
                print(v, indent + "   ")
            } else {
                if (type(v) == "function") log(indent + tostring(n) + "()")
                else log(indent + tostring(n) + ": " + tostring(v))
            }
        }
    };
    print = _toString;
}

/*
import inet.http;
inet.http.import("https://suiang.cn/aardio/inetlib/table.event.aardio")
*/
